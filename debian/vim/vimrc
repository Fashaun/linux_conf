
" ----- Shaun's vimrc -----

" Make vim for useful"
set nocompatible " -- Testfail"

" Show basic Syntax
syntax on

" file type should set off for some purpose

" Show line number
set nu

" set line break
set wrap
set linebreak

" HilightSearch
set hlsearch
set incsearch

" Set ruler
set ruler

" For vim 8.0 , default mouse=a, but it is not convienent for me to copy and paste
set mouse=r

" Key List
" <Esc> - esc
" <CR> - Enter

" imap
  " Hot key for exit insert mode
  :imap ;; <Esc>

" inoremap
:inoremap ( ()<Esc>i
:inoremap " ""<Esc>i
:inoremap ' ''<Esc>i
:inoremap [ []<Esc>i
:inoremap {<CR> {<CR>}<Esc>ko
:inoremap {{ {}<ESC>i


" Enable backspace in insert mode
set backspace=2

" Enable the line under cursor/color the same column as cursor for seeing code clearly
set cursorline
"set cursorcolumn

" Tab
    set expandtab
    " 自動縮排以四空格為基準
    set tabstop=4 "width of tab
    set shiftwidth=4 "width of indent
    set smarttab " Delete tab (4 spaces) by 1 backspace 

" Indent
    set smartindent
    set autoindent

" Mode line
    set modeline
    set modelines=2
    " ex: Makefile first line(# vim: set ts=4 sw=4 noet:) noet=noexpandtab

" Set history
set history=1000 " cmd history

" English spell 
"set spell " show spell error use z= to check spell suggestion

" Show file name in window titlebar
set title " -- Testfail"

" auto read when file is changed from outside
set autoread

let g:BASH_AuthorName   = 'Shaun Lin'
let g:BASH_Email        = 'fashionshow0415@gmail.com'
let g:BASH_Company      = 'Open Source Corporation'''''''

"filetype extend for 4ipnet html template
au BufReadPost *.tpl set filetype=html

" vim-plug plugin manager for ondemand loading
" https://github.com/junegunn/vim-plug
" Install automation
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! Create_cscope_file(execfile)                                           
    exe "! bash" a:execfile a:execfile                                                                  
endfunction

function! Create_cscope_out(cscope_files)                                           
    exe "! cscope -bRq -i" a:cscope_files                                                                  
endfunction

" cscope automation
if has("cscope")
    let cscope_exec=findfile("cscope.sh", ".;")
    if !empty(cscope_exec)
        if cscope_exec ==? "cscope.sh"
            set csre
        endif
        silent call Create_cscope_file(cscope_exec)
        let cscope_files=findfile("cscope.files", ".;")
        if !empty(cscope_files) && filereadable(cscope_files)
            silent call Create_cscope_out(cscope_files)
            let cscope_out=findfile("cscope.out", ".;")
            if !empty(cscope_out) && filereadable(cscope_out)
                silent exe "cs add" cscope_out
            endif
        endif
    endif
endif

noremap <leader>cs :cs find s 
noremap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
noremap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
noremap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
noremap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
noremap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
noremap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
noremap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
noremap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>

" Plugin key map
" vim ycm global variable
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'

" vim taglist
map <f9> :Tlist<CR> "taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
set ut=100

" vim srcexpl hotkey
"nmap <F10> :SrcExplToggle<CR>
"let g:SrcExpl_pluginList = [
"    \"__Tag_List__",
"    \"_NERD_tree_"
"]

"cscope

call plug#begin('~/.vim/plugged')
    
    "bash-support"
        Plug 'vim-scripts/bash-support.vim'
    "ctrlp plugin"
        Plug 'kien/ctrlp.vim'
    "power line
        Plug 'powerline/powerline'
    "php
        Plug 'stanangeloff/php.vim'
    "matchit : use % to jump end tag or end }/)/], depend on filetype
        Plug 'vim-scripts/matchit.zip'
    "cscope db creation"
        Plug 'brookhong/cscope.vim'
    "cscope keymap - Mirror from http://cscope.sourceforge.net/cscope_maps.vim
        Plug 'chazy/cscope_maps'
    "For C taglist
        Plug 'vim-scripts/taglist.vim'
    "For syntax checking
        Plug 'scrooloose/syntastic'
    "For autocomplete   
        Plug 'valloric/youcompleteme', {'do' : '~/.vim/plugged/youcompleteme/install.py --go-completer --tern-completer --clang-completer --js-completer' } 
    "For html folding ???  
    " For directory diff
        Plug 'vim-scripts/DirDiff.vim'
    " let vim become source insight
        Plug 'wesleyche/srcexpl'
    " vim golang library 
        Plug 'fatih/vim-go'
call plug#end()
